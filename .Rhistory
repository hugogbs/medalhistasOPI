select(f, speak_ratio, female_speak, year), nc = 20)
# O df em formato longo, para visualização
filmes.scaled.km.long = km %>%
augment(filmes.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
f, speak_ratio, female_speak, year) # = move para long todas as
# variávies menos repository_language
# e .cluster
filmes.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = title, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster, ncol = 2)
plot(silhouette(km$cluster, dists), col = colors, border = NA, main = 'Silhueta dos grupos usando o K-means')
row.names(filmes.scaled) = NULL
n_clusters = 6
set.seed(123)
# O agrupamento de fato:
km = filmes.scaled %>%
select(f, speak_ratio, female_speak, year) %>%
kmeans(centers = n_clusters, nstart = 20)
filmes.scaled <- as.data.frame(filmes.scaled)
autoplot(km, data = filmes.scaled, size = 2, main = "Grupos obtidos usando k-means") +
scale_color_brewer(palette = "Set2") +
labs(colour = 'Grupos')
km
wssplot <- function(data, nc=15, seed=123){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Número de grupos",
ylab="Soma dos quadrados dos grupos")}
wssplot(filmes.scaled %>%
select(f, speak_ratio, female_speak, year), nc = 20)
# O df em formato longo, para visualização
filmes.scaled.km.long = km %>%
augment(filmes.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
f, speak_ratio, female_speak, year) # = move para long todas as
# variávies menos repository_language
# e .cluster
filmes.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = title, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster, ncol = 2)
plot(silhouette(km$cluster, dists), col = colors, border = NA, main = 'Silhueta dos grupos usando o K-means')
row.names(filmes.scaled) = NULL
n_clusters = 6
set.seed(12346)
# O agrupamento de fato:
km = filmes.scaled %>%
select(f, speak_ratio, female_speak, year) %>%
kmeans(centers = n_clusters, nstart = 20)
filmes.scaled <- as.data.frame(filmes.scaled)
autoplot(km, data = filmes.scaled, size = 2, main = "Grupos obtidos usando k-means") +
scale_color_brewer(palette = "Set2") +
labs(colour = 'Grupos')
km
wssplot <- function(data, nc=15, seed=123){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Número de grupos",
ylab="Soma dos quadrados dos grupos")}
wssplot(filmes.scaled %>%
select(f, speak_ratio, female_speak, year), nc = 20)
# O df em formato longo, para visualização
filmes.scaled.km.long = km %>%
augment(filmes.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
f, speak_ratio, female_speak, year) # = move para long todas as
# variávies menos repository_language
# e .cluster
filmes.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = title, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster, ncol = 2)
plot(silhouette(km$cluster, dists), col = colors, border = NA, main = 'Silhueta dos grupos usando o K-means')
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
screenshot.force = FALSE,
fig.cap = '',
fig.align = 'center')
library(tidyverse)
library(rvest)
library(plotly, warn.conflicts = F)
library(cluster)
library(ggdendro)
library(cowplot)
library(RColorBrewer)
library(broom)
library(ggfortify)
library(stringr)
theme_set(theme_light())
personagens <- read_csv("character_list5.csv") %>%
filter(gender != "?") %>%
group_by(script_id, gender) %>%
summarise(words = sum(words)) %>%
spread(gender, words, fill = 0)
filmes_original <- read_csv("meta_data7.csv") %>%
filter(!is.na(gross))
filmes <- inner_join(personagens, filmes_original, by = "script_id")
falas <- filmes$lines_data
falas <- str_split(falas, "")
for (i in 1:length(falas)){
ms <-sum(as.integer(falas[[i]])) / (length(falas[[i]]))*2
filmes$male_speak[i] <- ms
filmes$female_speak[i] <- (14 - ms)
filmes$speak_ratio[i] <- (14-ms)/ms
}
filmes <- filmes %>%
select(script_id, title, f, speak_ratio, female_speak, year)
filmes.log <- filmes %>%
mutate_each(funs(log(. + 1)), -c(script_id, title))
filmes.scaled <- filmes.log
filmes.scaled$f <- scale(filmes.log$f)
filmes.scaled$year <- scale(filmes.log$year)
filmes.scaled$speak_ratio <- scale(filmes.log$speak_ratio)
filmes.scaled$female_speak <- scale(filmes.log$female_speak)
dists <- filmes.scaled %>%
select(-c(script_id, title)) %>%
dist(method = 'euclidian')
colors <- brewer.pal(6, 'Set2')
row.names(filmes.scaled) = NULL
n_clusters = 6
set.seed(12346)
# O agrupamento de fato:
km = filmes.scaled %>%
select(f, speak_ratio, female_speak, year) %>%
kmeans(centers = n_clusters, nstart = 20)
filmes.scaled <- as.data.frame(filmes.scaled)
autoplot(km, data = filmes.scaled, size = 2, main = "Grupos obtidos usando k-means") +
scale_color_brewer(palette = "Set2") +
labs(colour = 'Grupos')
km
wssplot <- function(data, nc=15, seed=123){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Número de grupos",
ylab="Soma dos quadrados dos grupos")}
wssplot(filmes.scaled %>%
select(f, speak_ratio, female_speak, year), nc = 20)
# O df em formato longo, para visualização
filmes.scaled.km.long = km %>%
augment(filmes.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
f, speak_ratio, female_speak, year) # = move para long todas as
# variávies menos repository_language
# e .cluster
filmes.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = title, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster, ncol = 2)
plot(silhouette(km$cluster, dists), col = colors, border = NA, main = 'Silhueta dos grupos usando o K-means')
row.names(filmes.scaled) = NULL
n_clusters = 6
set.seed(12346)
# O agrupamento de fato:
km = filmes.scaled %>%
select(f, speak_ratio, female_speak, year, m, male_speak) %>%
kmeans(centers = n_clusters, nstart = 20)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
screenshot.force = FALSE,
fig.cap = '',
fig.align = 'center')
library(tidyverse)
library(rvest)
library(plotly, warn.conflicts = F)
library(cluster)
library(ggdendro)
library(cowplot)
library(RColorBrewer)
library(broom)
library(ggfortify)
library(stringr)
theme_set(theme_light())
personagens <- read_csv("character_list5.csv") %>%
filter(gender != "?") %>%
group_by(script_id, gender) %>%
summarise(words = sum(words)) %>%
spread(gender, words, fill = 0)
filmes_original <- read_csv("meta_data7.csv") %>%
filter(!is.na(gross))
filmes <- inner_join(personagens, filmes_original, by = "script_id")
falas <- filmes$lines_data
falas <- str_split(falas, "")
for (i in 1:length(falas)){
ms <-sum(as.integer(falas[[i]])) / (length(falas[[i]]))*2
filmes$male_speak[i] <- ms
filmes$female_speak[i] <- (14 - ms)
filmes$speak_ratio[i] <- (14-ms)/ms
}
filmes <- filmes %>%
select(script_id, title, f, speak_ratio, female_speak, year, m, male_speak)
filmes.log <- filmes %>%
mutate_each(funs(log(. + 1)), -c(script_id, title))
filmes.scaled <- filmes.log
filmes.scaled$f <- scale(filmes.log$f)
filmes.scaled$m <- scale(filmes.log$m)
filmes.scaled$year <- scale(filmes.log$year)
filmes.scaled$speak_ratio <- scale(filmes.log$speak_ratio)
filmes.scaled$female_speak <- scale(filmes.log$female_speak)
filmes.scaled$male_speak <- scale(filmes.log$male_speak)
dists <- filmes.scaled %>%
select(-c(script_id, title)) %>%
dist(method = 'euclidian')
colors <- brewer.pal(6, 'Set2')
row.names(filmes.scaled) = NULL
n_clusters = 6
set.seed(12346)
# O agrupamento de fato:
km = filmes.scaled %>%
select(f, speak_ratio, female_speak, year, m, male_speak) %>%
kmeans(centers = n_clusters, nstart = 20)
filmes.scaled <- as.data.frame(filmes.scaled)
autoplot(km, data = filmes.scaled, size = 2, main = "Grupos obtidos usando k-means") +
scale_color_brewer(palette = "Set2") +
labs(colour = 'Grupos')
km
wssplot <- function(data, nc=15, seed=123){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Número de grupos",
ylab="Soma dos quadrados dos grupos")}
wssplot(filmes.scaled %>%
select(f, speak_ratio, female_speak, year, m, male_speak), nc = 20)
# O df em formato longo, para visualização
filmes.scaled.km.long = km %>%
augment(filmes.scaled) %>% # Adiciona o resultado de km
# aos dados originais dw2.scaled em
# uma variável chamada .cluster
gather(key = "variável",
value = "valor",
f, speak_ratio, female_speak, year, m, male_speak) # = move para long todas as
# variávies menos repository_language
# e .cluster
filmes.scaled.km.long %>%
ggplot(aes(x = `variável`, y = valor, group = title, colour = .cluster)) +
#geom_point(alpha = 0.2) +
geom_line(alpha = .5) +
facet_wrap(~ .cluster, ncol = 2)
plot(silhouette(km$cluster, dists), col = colors, border = NA, main = 'Silhueta dos grupos usando o K-means')
console.log(allocationsList.push({i : newList}));
devtools::install_github("brendan-r/brocks")
install.packages('devtools')
install.packages("devtools")
devtools::install_github("brendan-r/brocks")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, fig.align="center")
library(tidyverse)
library(resample)
library(GGally)
library(knitr)
library(lubridate)
library(chron)
library(highcharter)
library(xts)
theme_set(theme_bw())
dados <- read.csv("github-users-committing-filetypes.csv")
dados <- dados %>%
unite("data", the_year, the_month, month_day, sep = "-") %>%
mutate(data = as.Date(strptime(data, "%Y-%m-%d"))) %>%
mutate(fds = is.weekend(data)) %>%
mutate(dia_da_semana = weekdays(data)) %>%
mutate(mes = month_(data))
dados <- read.csv("github-users-committing-filetypes.csv")
dados <- dados %>%
unite("data", the_year, the_month, month_day, sep = "-") %>%
mutate(data = as.Date(strptime(data, "%Y-%m-%d"))) %>%
mutate(fds = is.weekend(data)) %>%
mutate(dia_da_semana = weekdays(data)) %>%
mutate(mes = month(data))
dados_ <- dados %>%
select(-c(file_extension, fds, dia_da_semana)) %>%
group_by(data) %>%
summarise(users_tot = sum(users)) %>%
remove_rownames %>%
column_to_rownames(var="data") %>%
as.xts()
highchart(type = "stock") %>%
hc_title(text = "Timeline da Atividade Geral do Github") %>%
hc_add_series(dados_)
monthplot(dados_)
dados.group <- dados %>%
filter(substr(data, 0,  4) == "2016") %>%
group_by(mes = substr(data, 6,  7), dia = substr(data, 9,  10)) %>%
summarize(usuarios = sum(users))
group_by(mes) %>%
summarise(usuarios.median = median(usuarios))
dados.group <- dados %>%
filter(substr(data, 0,  4) == "2016") %>%
group_by(mes = substr(data, 6,  7), dia = substr(data, 9,  10)) %>%
summarize(usuarios = sum(users))
# group_by(mes) %>%
# summarise(usuarios.median = median(usuarios))
ggplot(data = dados.group, aes(x = mes, y = usuarios.median)) +
geom_line() +
geom_point() +
dados.group2 <- dados %>%
filter(substr(data, 0,  4) == "2017") %>%
group_by(mes) %>%
summarize(mediana = median(users),
media = mean(users))
dados.group <- dados %>%
filter(substr(data, 0,  4) == "2016") %>%
group_by(mes = substr(data, 6,  7), dia = substr(data, 9,  10)) %>%
summarize(usuarios = sum(users))
# group_by(mes) %>%
# summarise(usuarios.median = median(usuarios))
ggplot(data = dados.group, aes(x = mes, y = usuarios.median)) +
geom_line() +
geom_point()
dados.group <- dados %>%
filter(substr(data, 0,  4) == "2016") %>%
group_by(mes = substr(data, 6,  7), dia = substr(data, 9,  10)) %>%
summarize(usuarios = sum(users)) %>%
group_by(mes) %>%
summarise(usuarios.median = median(usuarios))
ggplot(data = dados.group, aes(x = mes, y = usuarios.median)) +
geom_line() +
geom_point()
dados.group2 <- dados %>%
filter(substr(data, 0,  4) == "2017") %>%
group_by(mes) %>%
summarize(mediana = median(users),
media = mean(users))
ggplot(data = dados.group2, aes(x = mes, y = mediana)) +
geom_line() +
geom_point() +
scale_x_discrete()
dados.meses <- dados %>%
filter(mes %in% c(1, 12))
dados.ferias <- dados %>%
filter(!(mes %in% c(1, 12)))
dados_diff <- bootstrap2(data = dados.meses$users,
data2 = dados.ferias$users,
median,
R = 10000)
dados_diff.ci <- CI.percentile(dados_diff, probs = c(.025, .975))
dados_diff.ci
data.frame(dados_diff.ci) %>%
ggplot(aes(x = "Diferença", ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2) +
geom_hline(yintercept = 0, colour = "darkblue")
dados_mensais <- dados %>%
mon
median.md <- bootstrap2(dados_md$users,
treatment = dados_md$fds,
median,
R = 10000)
median.md <- bootstrap2(dados_md$users,
treatment = dados_md$fds,
median,
R = 10000)
dados_m <- dados %>%
select(-c(file_extension, dia_da_semana)) %>%
remove_rownames %>%
column_to_rownames(var="data") %>%
as.xts()
View(dados)
dados <- dados %>%
unite("data", the_year, the_month, month_day, sep = "-") %>%
mutate(data = as.Date(strptime(data, "%Y-%m-%d"))) %>%
mutate(fds = is.weekend(data)) %>%
mutate(dia_da_semana = weekdays(data)) %>%
mutate(mes = month(data)) %>%
mutate(is_segsex = dia_da_semana %in% c("segunda", "sexta"))
dados <- read.csv("github-users-committing-filetypes.csv")
dados <- dados %>%
unite("data", the_year, the_month, month_day, sep = "-") %>%
mutate(data = as.Date(strptime(data, "%Y-%m-%d"))) %>%
mutate(fds = is.weekend(data)) %>%
mutate(dia_da_semana = weekdays(data)) %>%
mutate(mes = month(data)) %>%
mutate(is_segsex = dia_da_semana %in% c("segunda", "sexta"))
mSS <- bootstrap2(dados$users,
treatment = dados$is_segsex,
median,
R = 10000)
mSS.CI <- CI.percentile(mSS, probs = c(.025, .975))
data.frame(mSS.CI) %>%
ggplot(aes(x = "Diferença", ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2) +
geom_hline(yintercept = 0, colour = "darkblue")
mSS.CI
View(dados.group)
dados.ss = bootstrap(dados %>%
filter(is_segsex), median(users))
dados.ss = bootstrap(dados %>%
filter(is_segsex), median(users))
ss.CI = CI.bca(b, probs = c(.025, .975))
ss.CI = CI.bca(dados.ss, probs = c(.025, .975))
ss.CI = CI.bca(dados.ss, probs = c(.025, .975))
ss.CI
dados.Nss = bootstrap(dados %>%
filter(!is_segsex), median(users))
Nss.CI = CI.bca(dados.Nss, probs = c(.025, .975))
Nss.CI
df <- data.frame(rbind(ss.CI,
Nss.CI))
df$medida = row.names(df)
df %>%
ggplot(aes(x = medida, ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2)
dados.ss = bootstrap(dados %>%
filter(is_segsex), median(users))
ss.CI = CI.bca(dados.ss, probs = c(.025, .975))
ss.CI
dados.Nss = bootstrap(dados %>%
filter(!is_segsex), median(users))
Nss.CI = CI.bca(dados.Nss, probs = c(.025, .975))
Nss.CI
df <- data.frame(rbind(ss.CI,
Nss.CI))
df$medida = row.names(df)
df %>%
ggplot(aes(x = medida, ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2)
mSS <- bootstrap2(dados$users,
treatment = dados$is_segsex,
median,
R = 10000)
mSS.CI <- CI.percentile(mSS, probs = c(.025, .975))
data.frame(mSS.CI) %>%
ggplot(aes(x = "Diferença", ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2) +
geom_hline(yintercept = 0, colour = "darkblue")
median.md <- bootstrap2(dados_md$users,
treatment = dados_md$fds,
median,
R = 10000)
dados.ss = bootstrap(dados %>%
filter(is_segsex), median(users))
ss.CI = CI.bca(dados.ss, probs = c(.025, .975))
ss.CI
dados.Nss = bootstrap(dados %>%
filter(!is_segsex), median(users))
Nss.CI = CI.bca(dados.Nss, probs = c(.025, .975))
Nss.CI
df <- data.frame(rbind(ss.CI,
Nss.CI))
df$medida = row.names(df)
df %>%
ggplot(aes(x = medida, ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2)
mSS <- bootstrap2(dados$users,
treatment = dados$is_segsex,
median,
R = 10000)
mSS.CI <- CI.percentile(mSS, probs = c(.025, .975))
data.frame(mSS.CI) %>%
ggplot(aes(x = "Diferença", ymin = X2.5., ymax = X97.5.)) +
geom_errorbar(width = .2) +
geom_hline(yintercept = 0, colour = "darkblue")
ggplot(data = dados, aes(x = algoritmo, y = tempo)) +
geom_boxplot()
library(tidyverse)
ggplot(data = dados, aes(x = algoritmo, y = tempo)) +
geom_boxplot()
library(highcharter)
icons <- c("male", "female")
n <- c(3, 8)
hciconarray(icons, n, icons = icons, size = 5)
hciconarray(icons, n, icons = icons, size = 10)
icons <- c("nice", "good")
n <- c(3, 8)
hciconarray(icons, n, icons = icons, size = 10)
hciconarray(icons, n, icons = "child", size = 10)
hciconarray(icons, n, icons = "man", size = 10)
hciconarray(icons, n, icons = "male", size = 10)
hciconarray(icons, n, icons = "dog", size = 10)
hciconarray(icons, n, icons = "plane", size = 10)
hciconarray(icons, n, size = 10)
hciconarray(icons, n, icons = "car", size = 10)
hciconarray(icons, n, icons = "diamond", size = 10)
hciconarray(icons, n, icons = "afro", size = 10)
faicos$name
fa_icon()
?hciconarray
hciconarray(icons, n, icons = c("male", "female"), size = 10)
n <- c(7, 3)
hciconarray(icons, n, icons = c("male", "female"), size = 10)
setwd("~/Documentos/medalhistasOPI")
library(tidyverse)
premiados_geral <- read_csv("data/Respostas - Editado para análise - Geral.csv")
View(premiados_geral)
library(plotly)
